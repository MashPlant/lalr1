{include}
{macros}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(u32)]
pub enum TokenKind {{ {token_kind} }}
enum StackItem<'p> {{ _Token(Token<'p>), {stack_item} }}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub struct Token<'l> {{
  pub kind: TokenKind,
  pub piece: &'l [u8],
  pub line: u32,
  pub col: u32,
}}

#[derive(Default)]
pub struct Lexer<'l> {{
  pub string: &'l [u8],
  pub line: u32,
  pub col: u32,
  {lexer_field}
}}

impl<'l> Lexer<'l> {{
  pub fn new(string: &[u8]) -> Lexer {{
    Lexer {{ string, line: 1, col: 1, ..<_>::default() }}
  }}

  pub fn next(&mut self) -> Token<'l> {{
    static ACC: [TokenKind; {dfa_size}] = [{acc}];
    static EC: [u8; 256] = [{ec}];
    static DFA_EDGE: [[{u_dfa_size}; {ec_num}]; {dfa_size}] = [{dfa_edge}];
    // line & col is the beginning of this token, self.line & col is the latest char
    let (mut line, mut col) = (self.line, self.col);
    let mut last_acc = TokenKind::_Err;
    let mut state = 0;
    let mut i = 0;
    loop {{
      let (ch, nxt);
      if i < self.string.len() {{
        ch = *idx!(self.string, i) as usize;
        nxt = *idx!(idx!(DFA_EDGE, state), *idx!(EC, ch) as usize) as usize;
      }} else {{
        ch = 0;
        nxt = 0;
      }};
      let acc = *idx!(ACC, nxt);
      if acc != TokenKind::_Err {{ last_acc = acc }};
      state = nxt;
      if nxt == 0 {{ // dead, should not eat this char
        let piece = idx!(self.string, ..i);
        self.string = idx!(self.string, i..);
        if i == 0 || last_acc != TokenKind::_Eps {{
          {lexer_action}
          return Token {{ kind: if i == 0 {{ TokenKind::_Eof }} else {{ last_acc }}, piece, line, col }};
        }} else {{
          line = self.line;
          col = self.col;
          last_acc = TokenKind::_Err;
          state = 0;
          i = 0;
        }}
      }} else {{ // continue, eat this char
        if ch == b'\n' as _ {{
          self.line += 1;
          self.col = 1;
        }} else {{ self.col += 1; }}
        i += 1;
      }}
    }}
  }}
}}

{show_token_prod}
{parser_struct}