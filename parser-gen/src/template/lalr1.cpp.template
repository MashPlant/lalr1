#include <cstdint>
#include <cstdlib>
#include <string_view>
#include <utility>
#include <variant>
#include <vector>
{include}
using u8 = uint8_t;
using u16 = uint16_t;
using u32 = uint32_t;

struct Token {{
  enum Kind: u32 {{ {token_kind} }} kind;
  std::string_view piece;
  u32 line, col;
}};

using StackItem = std::variant<Token, {stack_item}>;

struct Lexer {{
  std::string_view string;
  std::string_view fn;
  u32 line, col;
  {lexer_field}
  explicit Lexer(std::string_view string, std::string_view fn="") : string(string), fn(fn), line(1), col(1) {{}}
  Token next();
}};

{parser_struct}

Token Lexer::next() {{
  const static Token::Kind ACC[] = {{{acc}}};
  const static u8 EC[] = {{{ec}}};
  const static {u_dfa_size} DFA_EDGE[][{ec_num}] = {{{dfa_edge}}};
  u32 l = line, c = col;
  Token::Kind last_acc = Token::_Err;
  u32 state = 0, i = 0;
  while (true) {{
    u32 ch, nxt;
    if (i < string.size()) {{ ch = string[i], nxt = DFA_EDGE[state][EC[ch]]; }} else {{ ch = nxt = 0; }}
    Token::Kind acc = ACC[nxt];
    if (acc != Token::_Err) {{ last_acc = acc; }}
    state = nxt;
    if (nxt == 0) {{ // dead, should not eat this char
      // we are not using substr here, because it does range check and may throws exception
      std::string_view piece(string.data(), i);
      string = std::string_view(string.data() + i, string.size() - i);
      if (i == 0 || last_acc != Token::_Eps) {{
        {lexer_action}
        return Token{{i == 0 ? Token::_Eof : last_acc, piece, l, c}};
      }} else {{
        l = line, c = col, last_acc = Token::_Err, state = 0, i = 0;
      }}
    }} else {{ // continue, eat this char
      if (ch == '\n') {{ ++line, col = 1; }} else {{ ++col; }}
      ++i;
    }}
  }}
}}

std::variant<{res_type}, Token> {parser_type}::parse(Lexer &lexer) {{
  const static {u_lr_fsm_size} PROD[] = {{{prod}}};
  const static {u_act_size} ACTION[][{term_num}] = {{{action}}};
  const static {u_lr_fsm_size} GOTO[][{nt_num}] = {{{goto}}};
  std::vector<std::pair<StackItem, {u_lr_fsm_size}>> stk;
  stk.emplace_back(StackItem{{}}, 0);
  u32 state = 0;
  Token token = lexer.next();
  while (true) {{
    u32 act = ACTION[state][token.kind], act_val = act >> 2;
    switch (act & 3) {{
      case 0: {{
        stk.emplace_back(token, act_val);
        state = act_val;
        token = lexer.next();
        break;
      }}
      case 1: {{
        StackItem __;
        // we are confident that the value must be what we expect, so directly dereference the return value of `std::get_if`
        // we are not using `std::get`, because it performs runtime check, and throws exceptions when fails
        switch (act_val) {{
          {parser_act}
          default:
            __builtin_unreachable();
        }}
        {u_lr_fsm_size} nxt = GOTO[stk.back().second][PROD[act_val]];
        stk.emplace_back(std::move(__), nxt);
        state = nxt;
        break;
      }}
      case 2:
        return std::move(*std::get_if<{res_type}>(&stk.back().first));
      case 3:
        return token;
      default:
        __builtin_unreachable();
    }}
  }}
}}

{epilogue}
