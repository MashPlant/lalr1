#include <cstdint>
#include <string_view>
#include <vector>
#include <variant>
#include <utility>

{include}

using u8 = uint8_t;
using u16 = uint16_t;
using u32 = uint32_t;

struct Token {{
  enum Kind : {u_term_num} {{ {token_kind} }} kind;
  std::string_view piece;
  u32 line, col;
}};

struct Lexer {{
  std::string_view string;
  u32 line, col;

  explicit Lexer(std::string_view string) : string(string), line(1), col(1) {{}}

  Token next();
}};

{parser_struct}

Token Lexer::next() {{
  const static Token::Kind ACC[] = {{{acc}}};
  const static u8 EC[] = {{{ec}}};
  const static {u_dfa_size} DFA_EDGE[][{ec_size}] = {{{dfa_edge}}};
  u32 l = line, c = col;
  Token::Kind last_acc = Token::_Err;
  u32 state = 0, i = 0;
  while (i < string.size()) {{
    u8 ch = string[i];
    u8 ec = EC[ch];
    {u_dfa_size} nxt = DFA_EDGE[state][ec];
    Token::Kind acc = ACC[nxt];
    if (acc != Token::_Err) {{ last_acc = acc; }}
    state = nxt;
    if (nxt == 0) {{ // dead, should not eat this char
        // we are not using substr here, because it does range check and may throws exception
        std::string_view piece(string.data(), i);
        string = std::string_view(string.data() + i, string.size() - i);
        if (last_acc != Token::_Eps) {{
            return Token{{last_acc, piece, l, c}};
          }} else {{
            l = line, c = col, last_acc = Token::_Err, state = 0, i = 0;
          }}
      }} else {{ // continue, eat this char
        if (ch == '\n') {{ ++line, col = 1; }} else {{ ++col; }}
        ++i;
      }}
  }}
  // end of file
  std::string_view piece(string.data(), i);
  string = "";
  return last_acc != Token::_Eps && i != 0 ? Token{{last_acc, piece, l, c}} : Token{{Token::_Eof, "", line, col}};
}}

std::variant<{res_type}, Token> {parser_type}::parse(Lexer &lexer) {{
  using StackItem = std::variant<Token, {stack_item}>;
  struct Act {{
    enum : u8 {{ Shift, Reduce, Acc, Err }} kind;
    {u_lr_fsm_size} val;
  }};
  const static {u_lr_fsm_size} PROD[] = {{{prod}}};
  const static Act ACTION[][{term_num}] = {{{action}}};
  const static {u_lr_fsm_size} GOTO[][{nt_num}] = {{{goto}}};
  std::vector<std::pair<StackItem, {u_lr_fsm_size}>> stk;
  stk.emplace_back(StackItem{{}}, 0);
  u32 state = 0;
  Token token = lexer.next();
  while (true) {{
    Act act = ACTION[state][token.kind];
    switch (act.kind) {{
      case Act::Shift: {{
        stk.emplace_back(token, act.val);
        state = act.val;
        token = lexer.next();
        break;
      }}
      case Act::Reduce: {{
        StackItem __;
        // we are confident that the value must be what we expect, so directly dereference the return value of `std::get_if`
        // we are not using `std::get`, because it performs runtime check, and throws exceptions when fails
        switch (act.val) {{
          {parser_act}
          default:
            __builtin_unreachable();
        }}
        {u_lr_fsm_size} nxt = GOTO[stk.back().second][PROD[act.val]];
        stk.emplace_back(std::move(__), nxt);
        state = nxt;
        break;
      }}
      case Act::Acc:
        return std::move(*std::get_if<{res_type}>(&stk.back().first));
      case Act::Err:
        return token;
      default:
        __builtin_unreachable();
    }}
  }}
}}