macro_rules! set {{
  ($($x: expr,)*) => {{{{
    let mut s = HashSet::default();
    $(s.insert($x);)*
    s
  }}}};
}}

macro_rules! map {{
  ($($k: expr => $v: expr,)*) => {{{{
    let mut m = HashMap::default();
    $(m.insert($k, $v);)*
    m
  }}}};
}}

const TERM_NUM: usize = {term_num};

lazy_static::lazy_static! {{
  pub static ref FOLLOW: [HashSet<u32>; {nt_num}] = [{follow}];
  pub static ref TABLE: [HashMap<u32, (u32, Vec<u32>)>; {nt_num}] = [{table}];
}}

impl<'p> {parser_type} {{
  fn act(&mut self, prod: u32, mut stk: Vec<StackItem<'p>>) -> StackItem<'p> {{
    match prod {{
      {parser_act}
      _ => impossible!(),
    }}
  }}

  pub fn parse<'l: 'p>(&mut self, lexer: &mut Lexer<'l>) -> Option<{res_type}> {{
    match self._parse({res_nt_id}, &mut lexer.next(), lexer, &HashSet::default()) {{
      StackItem::_{res_id}(parse_res) => Some(parse_res),
      _ => None
    }}
  }}
}}